1:HL["/_next/static/css/f3b7caa23b8c2cbf.css","style",{"crossOrigin":""}]
0:["ZGy-cZzlThFRpSj7_PtSS",[[["",{"children":["blog",{"children":[["board","GitHub%20Pages%20%2B%20Next.js","d"],{"children":[["post","05-markdown-style","d"],{"children":["__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"05-markdown-style\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b7caa23b8c2cbf.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-0a71d942046487ff.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-0a71d942046487ff.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","GitHub%20Pages%20%2B%20Next.js","d"]
b:T1c51,<h1>github-markdown-css</h1>
<p>이전에는 직접 마크다운 스타일도 만들어봤지만 너무 귀찮고, 익숙한 깃허브 스타일을 사용해보고 싶어서 검색해봤다. <a href="https://github.com/sindresorhus/github-markdown-css" title="github-markdown-css">github-markdown-css</a>를 바로 찾을 수 있었다.</p>
<p><a href="https://github.com/sindresorhus/github-markdown-css#usage" title="github-markdown-css Usage">사용법</a>은 간단하다. CSS 파일(<code>github-markdown.css</code> 등)을 import 하고, 마크다운을 감싸고 있는 컨테이너 태그에 <code>markdown-body</code>를 클래스로 추가하면 끝이다.</p>
<ul>
<li><a href="https://github.com/sindresorhus/github-markdown-css/blob/main/github-markdown.css" title="github-markdown.css"><code>github-markdown.css</code></a>: 다크 모드 + 라이트 모드</li>
<li><a href="https://github.com/sindresorhus/github-markdown-css/blob/main/github-markdown-dark.css" title="github-markdown-dark.css"><code>github-markdown-dark.css</code></a>: 다크 모드</li>
<li><a href="https://github.com/sindresorhus/github-markdown-css/blob/main/github-markdown-light.css" title="github-markdown-light.css"><code>github-markdown-light.css</code></a>: 라이트 모드</li>
</ul>
<h2><code>app/layout.tsx</code>에 import</h2>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> <span class="hljs-string">'your_css_file.css'</span>
</code></pre>
<h2>클래스 추가</h2>
<p>Contentlayer 예제에서 작성한 <code>posts/[slug]/page.tsx</code>에서 마크다운이 들어간 부분의 <code>&#x3C;div></code> 태그의 <code>class</code>에 <code>markdown-body</code>를 추가한다.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">PostLayout</span> = (<span class="hljs-params">{ params }: { params: { slug: <span class="hljs-built_in">string</span> } }</span>) => {
  <span class="hljs-keyword">const</span> post = allPosts.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">post</span>) =></span> post.<span class="hljs-property">_raw</span>.<span class="hljs-property">flattenedPath</span> === params.<span class="hljs-property">slug</span>)
  <span class="hljs-keyword">if</span> (!post) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Post not found for slug: <span class="hljs-subst">${params.slug}</span>`</span>)

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">article</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mx-auto max-w-xl py-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8 text-center"</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">time</span> <span class="hljs-attr">dateTime</span>=<span class="hljs-string">{post.created}</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-1 text-xs text-gray-600"</span>></span>
          {format(parseISO(post.created), 'LLLL d, yyyy')}
        <span class="hljs-tag">&#x3C;/<span class="hljs-name">time</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"text-3xl font-bold"</span>></span>{post.title}<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span>
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"[&#x26;>*]:mb-3 [&#x26;>*:last-child]:mb-0 markdown-body"</span> // <span class="hljs-attr">여기</span>
        <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">post.body.html</span> }}
      /></span>
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">article</span>></span></span>
  )
}
</code></pre>
<p>다크 모드나 라이트 모드 한 개만 사용할거라면 여기까지가 끝이다.</p>
<h1>CSS 파일 수정</h1>
<p>다크 모드와 라이트 모드를 전환시킨다면, <a href="https://github.com/sindresorhus/github-markdown-css/blob/main/github-markdown.css" title="github-markdown.css"><code>github-markdown.css</code></a>를 사용하는 것이 편하다.</p>
<p>단, 파일을 수정해야 한다. 이 파일은 다크 모드와 라이트 모드를 미디어 쿼리로 구분한다. 나는 tailwind를 사용하기 때문에 다크 모드와 라이트 모드를 <code>&#x3C;html></code> 태그의 <code>class</code>로 구분한다. 그래서 미디어 쿼리로 작동하는 방식을 <code>class</code>로 바꿔주어야 한다.</p>
<pre><code class="hljs language-css"><span class="hljs-comment">/* 미디어 쿼리 방식(원본 파일) */</span>
<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) {
  <span class="hljs-selector-class">.markdown-body</span>,
  <span class="hljs-selector-attr">[data-theme=<span class="hljs-string">'dark'</span>]</span> {
    <span class="hljs-comment">/* 다크 모드 색상 정의 */</span>
    ...;
  }
}
<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: light) {
  <span class="hljs-selector-class">.markdown-body</span>,
  <span class="hljs-selector-attr">[data-theme=<span class="hljs-string">'light'</span>]</span> {
    <span class="hljs-comment">/* 라이트 모드 색상 정의 */</span>
    ...;
  }
}
</code></pre>
<p>원래 이랬던 파일을 이렇게 바꿔준다.</p>
<pre><code class="hljs language-css"><span class="hljs-comment">/* tailwind css 방식 */</span>
<span class="hljs-selector-tag">html</span>,
<span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[class=<span class="hljs-string">'dark'</span>]</span> {
  <span class="hljs-comment">/* 다크 모드 색상 정의 */</span>
  ...;
}
<span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[class=<span class="hljs-string">'light'</span>]</span> {
  <span class="hljs-comment">/* 라이트 모드 색상 정의 */</span>
  ...;
}
</code></pre>
<p>이렇게 하면 다크 모드와 라이트 모드를 전환할 때, 마크다운으로 작성한 부분도 깃허브 스타일로 잘 전환된다.</p>
<p>만약 전환되지 않는다면, next-themes의 <code>ThemeProvider</code> 설정을 잘 했는지 확인한다. <code>attribute="class"</code>를 넣어줘야 한다.</p>
<h2>주의: 배경색 바꾸기</h2>
<p>github-markdown-css에서 제공하는 CSS 파일에는 배경색이 지정되어 있다. 배경색을 수정하지 않고 그대로 사용한다면 자신이 만든 페이지의 배경색 위에 깃허브 색상이 나타나게 된다.</p>
<p><code>--color-canvas-default</code>의 값을 <code>transparent</code>로 바꾸면 해결된다.</p>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,210px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next.js",{"href":"/blog/GitHub Pages + Next.js","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next.js"}],["$","span",null,{"className":"text-gray-400","children":["(",14,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","GitHub%20Pages%20%2B%20Next.js","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","05-markdown-style","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"mb-1 text-3xl font-bold","children":"마크다운에 깃허브 스타일 적용하기"}],["$","time",null,{"dateTime":"2023-11-18T03:44:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2023. 11. 18. 12:44"}]]}],["$","div",null,{"className":"markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"05-markdown-style\"}"},"styles":null}],"segment":["post","05-markdown-style","d"]},"styles":null}],"segment":["board","GitHub%20Pages%20%2B%20Next.js","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"마크다운에 깃허브 스타일 적용하기 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
