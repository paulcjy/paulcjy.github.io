1:HL["/_next/static/css/f3b7caa23b8c2cbf.css","style",{"crossOrigin":""}]
0:["dXLkDWUCrrqu-ty3h5sDA",[[["",{"children":["blog",{"children":[["board","GitHub%20Pages%20%2B%20Next.js","d"],{"children":[["post","07-html-to-plaintext","d"],{"children":["__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"07-html-to-plaintext\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b7caa23b8c2cbf.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-0a71d942046487ff.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-0a71d942046487ff.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","GitHub%20Pages%20%2B%20Next.js","d"]
b:T1d48,<h1>문제</h1>
<p>Contentlayer의 예제를 따라하면 글 목록에 글 본문 전체가 출력된다. <code>app/page.tsx</code>의 <code>&#x3C;PostCard></code> 컴포넌트에 글 본문 전체를 넣도록 되어 있다. <code>&#x3C;div></code>에 <code>dangerouslySetInnerHTML</code>로 <code>post.body.html</code>을 통째로 전달한다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">PostCard</span>(<span class="hljs-params">post: Post</span>) {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-1 text-xl"</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">Link</span>
          <span class="hljs-attr">href</span>=<span class="hljs-string">{post.url}</span>
          <span class="hljs-attr">className</span>=<span class="hljs-string">"text-blue-700 hover:text-blue-900 dark:text-blue-400"</span>
        ></span>
          {post.title}
        <span class="hljs-tag">&#x3C;/<span class="hljs-name">Link</span>></span>
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">h2</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">time</span>
        <span class="hljs-attr">dateTime</span>=<span class="hljs-string">{post.created}</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-2 block text-xs text-gray-600"</span>
      ></span>
        {format(parseISO(post.created), 'LLLL d, yyyy')}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">time</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"text-sm [&#x26;>*]:mb-3 [&#x26;>*:last-child]:mb-0"</span>
        <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">post.body.html</span> }} // <span class="hljs-attr">이</span> <span class="hljs-attr">부분</span>
      /></span>
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  )
}
</code></pre>
<p>그러나 나는 글 본문 전체를 넣고 싶지도 않고, 마크다운을 적용하고 싶지도 않다. 글이 길다면 앞에서부터 특정 길이만큼만 잘라서 넣고 싶다. 그리고 마크다운 문법도 제외한 플레인 텍스트만 넣고 싶다.</p>
<h1>해결 방법</h1>
<p>일단 html로 변환된 <code>post.body.html</code>에서 html 태그만 제거한다. <a href="##" title="정규표현식 설명글">정규표현식</a>을 이용하면 쉽게 제거할 수 있다.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> plainText = textWithHtmlTags.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/&#x3C;.*?>/g</span>, <span class="hljs-string">''</span>)
</code></pre>
<p>글자 수 제한을 정한다. 제한을 넘지 않으면 그대로 사용한다. 제한을 넘기면 뒤를 자른 뒤 '...'을 붙인다.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> textLimit = <span class="hljs-number">200</span>
<span class="hljs-keyword">const</span> content =
  plainText.<span class="hljs-property">length</span> &#x3C; textLimit
    ? plainText
    : plainText.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, textLimit) + <span class="hljs-string">'...'</span>
</code></pre>
<p>원래 내용이 들어가던 <code>&#x3C;div></code> 태그에서 <code>dangerouslySetInnerHTML</code> 속성을 없애고, 내부에 자른 내용을 넣었다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-comment">// 완성된 &#x3C;PostCard> 컴포넌트</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">PostCard</span>(<span class="hljs-params">post: Post</span>) {
  <span class="hljs-keyword">const</span> plainText = post.<span class="hljs-property">body</span>.<span class="hljs-property">html</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/&#x3C;.*?>/g</span>, <span class="hljs-string">''</span>)
  <span class="hljs-keyword">const</span> textLimit = <span class="hljs-number">200</span>
  <span class="hljs-keyword">const</span> content =
    plainText.<span class="hljs-property">length</span> &#x3C; textLimit
      ? plainText
      : plainText.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, textLimit) + <span class="hljs-string">'...'</span>

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-1 text-xl"</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">Link</span>
          <span class="hljs-attr">href</span>=<span class="hljs-string">{post.url}</span>
          <span class="hljs-attr">className</span>=<span class="hljs-string">"text-blue-700 hover:text-blue-900 dark:text-blue-400"</span>
        ></span>
          {post.title}
        <span class="hljs-tag">&#x3C;/<span class="hljs-name">Link</span>></span>
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">h2</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">time</span>
        <span class="hljs-attr">dateTime</span>=<span class="hljs-string">{post.created}</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-2 block text-xs text-gray-600"</span>
      ></span>
        {format(parseISO(post.created), 'LLLL d, yyyy')}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">time</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>{content}<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  )
}
</code></pre>
<h1>추가: 또 다른 문제</h1>
<p>글 본문에 html 태그가 들어갈 때가 있다. 다행히도 정규표현식 <code>/&#x3C;.*?>/g</code>으로 전부 제거했을 때, 본문에 작성된 html 태그는 지워지지 않았다. 대신 처음부터 <code>&#x3C;</code>가 <code>&#x26;#x3C;</code>로 바뀌어져 있었다. <a href="https://www.codetable.net/hex/3c" title="unicode <"><code>&#x26;#x3C;</code></a>는 <code>&#x3C;</code>의 유니코드의 헥스 코드이다.</p>
<p><code>&#x26;#x3C;</code>만 다시 <code>&#x3C;</code>로 바꿔주면 정상적으로 표시된다. (대소문자 주의)</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> plainText = textWithHtmlTags
  .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/&#x3C;.*?>/g</span>, <span class="hljs-string">''</span>)
  .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">'&#x26;#x3C;'</span>, <span class="hljs-string">'&#x3C;'</span>)
</code></pre>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,210px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next.js",{"href":"/blog/GitHub Pages + Next.js","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next.js"}],["$","span",null,{"className":"text-gray-400","children":["(",14,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","GitHub%20Pages%20%2B%20Next.js","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","07-html-to-plaintext","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"mb-1 text-3xl font-bold","children":"html로 변환한 마크다운에서 정규표현식으로 html 태그 제거"}],["$","time",null,{"dateTime":"2023-11-18T14:28:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2023. 11. 18. 23:28"}]]}],["$","div",null,{"className":"markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"07-html-to-plaintext\"}"},"styles":null}],"segment":["post","07-html-to-plaintext","d"]},"styles":null}],"segment":["board","GitHub%20Pages%20%2B%20Next.js","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"html로 변환한 마크다운에서 정규표현식으로 html 태그 제거 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
