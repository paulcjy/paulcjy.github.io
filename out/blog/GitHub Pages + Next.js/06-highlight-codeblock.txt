1:HL["/_next/static/css/8c778e73ed56f245.css","style",{"crossOrigin":""}]
0:["fehhpasi4J_9q9Mf824ex",[[["",{"children":["blog",{"children":[["board","GitHub%20Pages%20%2B%20Next.js","d"],{"children":[["post","06-highlight-codeblock","d"],{"children":["__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"06-highlight-codeblock\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8c778e73ed56f245.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-c52e075abc27b8ed.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-c52e075abc27b8ed.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","GitHub%20Pages%20%2B%20Next.js","d"]
b:T256b,<p>마크다운에 깃허브 스타일을 적용했지만, 코드블럭은 하이라이트되지 않는다. Contentlayer에서는 플러그인 설치와 설정만 하면 쉽게 코드를 하이라이트 할 수 있다. Contentlayer 공식 문서에서 <a href="https://www.npmjs.com/package/rehype-highlight" title="rehype-highlight">rehype-highlight</a>를 사용했기 때문에 그대로 따라했다.</p>
<p><a href="https://contentlayer.dev/docs/reference/source-files/make-source-a5ba4922#markdown" title="Contentlayer API: makeSource">Contentlayer 마크다운 하이라이트 예제</a></p>
<h1>rehype-highlight 설치</h1>
<p><a href="https://www.npmjs.com/package/rehype-highlight" title="rehype-highlight">rehype-highlight</a>는 <a href="https://highlightjs.org/" title="highlight.js">highlight.js</a>를 이용해서 만든 rehype 플러그인이다. 단, <code>6.0.0</code> 버전을 설치해야 한다. 최신 버전인 <code>7.0.0</code>을 설치하면 작동하지 않는다.</p>
<pre><code class="hljs language-txt">npm install rehype-highlight@6.0.0
</code></pre>
<h1>contentlayer.config.js 설정</h1>
<p>설정 파일 <code>contentlayer.config.js</code>에서 <code>makeSource</code>의 <code>markdown</code> > <code>rehypePlugins</code>에 설치한 <code>rehype-highlight</code>를 넣어준다.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { makeSource } <span class="hljs-keyword">from</span> <span class="hljs-string">'@contentlayer/source-files'</span>
<span class="hljs-keyword">import</span> rehypeHighlight <span class="hljs-keyword">from</span> <span class="hljs-string">'rehype-highlight'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">makeSource</span>({
  <span class="hljs-comment">// ...</span>
  <span class="hljs-attr">markdown</span>: { <span class="hljs-attr">rehypePlugins</span>: [rehypeHighlight] },
})
</code></pre>
<p>공식 문서에는 플러그인에 <code>highlight</code>라고 적어놨지만, <code>rehypeHighlight</code>를 입력하면 vscode에서 자동으로 완성해준다.</p>
<h2>테스트</h2>
<p>rehype-highlight가 잘 적용되었는지 확인하려면, 페이지에 접속해서 코드블럭 부분을 개발자 도구로 확인해보면 된다. <code>&#x3C;pre></code>태그 내부에 있는 <code>&#x3C;code></code>태그 혹은 <code>&#x3C;span></code>태그에 클래스로 <code>hljs</code>가 들어있으면 작동하는 것이다.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs language-ts"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>import<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span> { makeSource }
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>from<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-string"</span>></span>'@contentlayer/source-files'<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>import<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span> rehypeHighlight
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>from<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-string"</span>></span>'rehype-highlight'<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>export<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>></span>default<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-title function_"</span>></span>makeSource<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>({
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-comment"</span>></span>// ...<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-attr"</span>></span>markdown<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>: {
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-attr"</span>></span>rehypePlugins<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>: [rehypeHighlight] }, })
<span class="hljs-tag">&#x3C;/<span class="hljs-name">code</span>></span>
</code></pre>
<p><code>&#x3C;span></code>태그의 클래스에서 'hljs-' 오른쪽에 있는 부분이 해당 코드를 어떤 색으로 칠해야 하는지를 나타낸다.</p>
<h1>CSS 파일 다운</h1>
<p>rehype-highlight를 적용하더라도 CSS 파일을 불러오지 않으면 코드에 색상이 적용되지 않는다. CSS는 원하는 스타일을 알아서 찾아야 한다.
단, rehype 플러그인으로 rehype-highlight를 사용했으므로 CSS 파일은 반드시 highlight.js에서 찾아야 한다.</p>
<h2>highlight.js에서 가져오기</h2>
<p>나는 GitHub의 마크다운 스타일을 적용하고 싶어서 코드블럭도 GitHub 스타일로 했다. CSS 파일을 쉽게 찾기 위해 <a href="https://highlightjs.org/" title="highlight.js">highlight.js</a>을 설치했다.</p>
<pre><code class="hljs language-sh">npm install highlight.js
</code></pre>
<p><code>node_modules/highlight.js/styles</code>를 열어보면 굉장히 많은 CSS 파일을 찾을 수 있다. 하나하나가 다 코드블럭 CSS 파일들이다. <code>.min.css</code>는 크기를 줄인 파일, <code>.css</code>는 일반 CSS 파일이다. 다크 모드와 라이트 모드가 필요해서 <code>github-dark.css</code>와 <code>github.css</code>를 가져왔고, 파일을 얻은 뒤에는 highlight.js를 삭제했다. <code>.min.css</code>를 가져오면 수정이 어렵다.</p>
<p><strong>패키지 설치가 싫다면 <a href="https://github.com/highlightjs/highlight.js/tree/main/src/styles" title="highlight.js GitHub Repository: /src/styles">highlight.js 리포지토리</a>에서도 가져올 수 있다.</strong></p>
<h2>다크 모드 / 라이트 모드 합치기</h2>
<p>각 파일에는 클래스와 색상이 바로 연결되어 있다. Tailwind CSS로 다크 모드와 라이트 모드를 사용하기 위해 <code>&#x3C;html></code>태그의 <code>class</code>를 <code>dark</code>와 <code>light</code>로 바꿔줄 것이기 때문에 이것을 이용해서 두 파일을 합쳤다.</p>
<p>먼저, 각 파일에 있는 색상 코드를 변수로 만들어준다. 변수 이름은 자유롭게 짓는다. 다크 모드와 라이트 모드에서 같은 이름의 변수를 사용해야 한다.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">html</span>,
<span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[class=<span class="hljs-string">'light'</span>]</span> {
  <span class="hljs-attr">--color-hljs-color</span>: <span class="hljs-number">#24292e</span>;
  <span class="hljs-attr">--color-hljs-background</span>: <span class="hljs-number">#ffffff</span>;
  ...;
}
<span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[class=<span class="hljs-string">'dark'</span>]</span> {
  <span class="hljs-attr">--color-hljs-color</span>: <span class="hljs-number">#c9d1d9</span>;
  <span class="hljs-attr">--color-hljs-background</span>: <span class="hljs-number">#0d1117</span>;
  ...;
}
</code></pre>
<p>그리고 원래 색상 코드가 있던 자리에 해당 변수를 넣어준다.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.hljs</span> {
	<span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-hljs-background);
}

...

<span class="hljs-selector-class">.hljs-section</span> {
	<span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-section);
	<span class="hljs-attribute">font-weight</span>: bold;
}

...
</code></pre>
<blockquote>
<p>혹시나 이 작업이 귀찮다면 내가 <a href="/github-markdown-codeblock.css" title="github-markdown-codeblock.css">합쳐놓은 파일</a>을 사용해도 된다.</p>
</blockquote>
<h2>CSS 적용</h2>
<p><code>/app/layout</code>에 CSS 파일을 import 한다.</p>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,200px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next.js",{"href":"/blog/GitHub Pages + Next.js","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next.js"}],["$","span",null,{"className":"text-gray-400","children":["(",9,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","GitHub%20Pages%20%2B%20Next.js","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","06-highlight-codeblock","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"mb-1 text-3xl font-bold","children":"Contentlayer에서 코드블럭 하이라이트"}],["$","time",null,{"dateTime":"2023-11-18T12:30:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2023. 11. 18. 21:30"}]]}],["$","div",null,{"className":"markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"06-highlight-codeblock\"}"},"styles":null}],"segment":["post","06-highlight-codeblock","d"]},"styles":null}],"segment":["board","GitHub%20Pages%20%2B%20Next.js","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Contentlayer에서 코드블럭 하이라이트 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
