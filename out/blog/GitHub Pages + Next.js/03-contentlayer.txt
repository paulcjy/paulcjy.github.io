1:HL["/_next/static/css/8c778e73ed56f245.css","style",{"crossOrigin":""}]
0:["fehhpasi4J_9q9Mf824ex",[[["",{"children":["blog",{"children":[["board","GitHub%20Pages%20%2B%20Next.js","d"],{"children":[["post","03-contentlayer","d"],{"children":["__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"03-contentlayer\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8c778e73ed56f245.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-c52e075abc27b8ed.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-c52e075abc27b8ed.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","GitHub%20Pages%20%2B%20Next.js","d"]
b:T4a46,<h1>Contentlayer란</h1>
<p><a href="https://contentlayer.dev/">Contentlayer</a>는 콘텐츠를 JSON으로 변환해서 쉽게 사용할 수 있게 해주는 도구이다. 프로젝트 폴더에 있는 마크다운 파일을 Next.js에서 사용하기 위해 도입했다.</p>
<h2>Sources</h2>
<p>정식으로 지원하는 소스는 <a href="https://contentlayer.dev/docs/sources/files-ae74398f" title="Contentlayer > Sources > Files">파일</a>이다. (2023년 11월 기준)</p>
<ul>
<li>[원격 파일][contentlayer-remote](Git repository, database, API 등)과 <a href="https://contentlayer.dev/docs/sources/notion-b2ce5957" title="Contentlayer > Sources > Notion">노션</a>은 실험적으로만 제공한다.</li>
<li>Contentful은 개발 계획 중이고, Sanity는 고려하고 있다고 한다.</li>
</ul>
<h2>Environments</h2>
<p>정식으로 지원하는 환경은 <a href="https://contentlayer.dev/docs/environments/nextjs-dcf8e39e" title="Contentlayer > Environments > Next.js">Next.js</a> 뿐이다. (2023년 11월 기준)</p>
<ul>
<li>추가로 Remix, SvelteKit, Astro, Vite를 고려하고 있다고 한다.</li>
</ul>
<h1>Contentlayer 설치</h1>
<p><a href="https://contentlayer.dev/docs/getting-started-cddd76b7" title="Contentlayer > Getting Started">공식 문서</a></p>
<h2>패키지 설치</h2>
<pre><code class="hljs language-sh">npm install contentlayer next-contentlayer date-fns
</code></pre>
<h3>문제</h3>
<p>contentlayer는 Next 12, 13 버전을 필요로 하게 되어 있어서 Next 14에서 설치하려고 하니 에러가 떴다. (2023년 11월 기준)</p>
<pre><code class="hljs language-sh">npm ERR! code ERESOLVE
npm ERR! ERESOLVE unable to resolve dependency tree
npm ERR!
npm ERR! While resolving: paulcjy.github.io@0.1.0
npm ERR! Found: next@14.0.2
npm ERR! node_modules/next
npm ERR!   next@<span class="hljs-string">"14.0.2"</span> from the root project
npm ERR!
npm ERR! Could not resolve dependency:
npm ERR! peer next@<span class="hljs-string">"^12 || ^13"</span> from next-contentlayer@0.3.4
npm ERR! node_modules/next-contentlayer
npm ERR!   next-contentlayer@<span class="hljs-string">"*"</span> from the root project
npm ERR!
npm ERR! Fix the upstream dependency conflict, or retry
npm ERR! this <span class="hljs-built_in">command</span> with --force or --legacy-peer-deps
npm ERR! to accept an incorrect (and potentially broken) dependency resolution.
</code></pre>
<h3>해결 방법</h3>
<p>contentlayer 깃허브에 이미 해당 <a href="https://github.com/contentlayerdev/contentlayer/issues/588" title="Contentlayer GitHub Issues: ERROR: when trying to install next-contentlayer in Next.js @14">이슈</a>가 올라와 있었다. Next 14에서 사용할 수 있도록 pull request가 올라왔는데 merge 되지 않았다고 한다.</p>
<p>임시로 <code>package.json</code>에 아래 내용을 추가하면 잘 설치된다.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  ...
  <span class="hljs-attr">"overrides"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"next-contentlayer"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"next"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"$next"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2>Next.js 설정</h2>
<p><code>next.config.js</code>에서 <code>nextConfig</code>를 <code>withContentlayer</code>로 감싸준다.</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// next.config.js</span>
<span class="hljs-keyword">const</span> { withContentlayer } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'next-contentlayer'</span>)

<span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import('next').NextConfig</span>} */</span>
<span class="hljs-keyword">const</span> nextConfig = {}

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">withContentlayer</span>(nextConfig)
</code></pre>
<h2>TypeScript 설정</h2>
<p><code>tsconfig.json</code>에 아래 내용을 추가한다.</p>
<pre><code class="hljs language-json"><span class="hljs-comment">// tsconfig.json</span>
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"."</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">//  ^^^^^^^^^^^</span>
    <span class="hljs-attr">"paths"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"contentlayer/generated"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"./.contentlayer/generated"</span><span class="hljs-punctuation">]</span>
      <span class="hljs-comment">// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"include"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"next-env.d.ts"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"**/*.ts"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"**/*.tsx"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">".next/types/**/*.ts"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">".contentlayer/generated"</span>
    <span class="hljs-comment">// ^^^^^^^^^^^^^^^^^^^^^^</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2>.gitignore 설정</h2>
<p><code>.gitignore</code>에 <code>.contentlayer</code>를 추가한다.</p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># .gitignore</span>

...

<span class="hljs-comment"># contentlayer</span>
.contentlayer
</code></pre>
<h1>스키마 정의</h1>
<h2>Contentlayer 설정</h2>
<p>루트 디렉토리에 <code>contentlayer.config.ts</code>라는 파일을 만들고, 사용할 문서의 타입들을 정의한다.</p>
<p><code>Post</code>라는 타입을 정의한 예시이다.</p>
<pre><code class="hljs language-ts"><span class="hljs-comment">// contentlayer.config.ts</span>
<span class="hljs-keyword">import</span> { defineDocumentType, makeSource } <span class="hljs-keyword">from</span> <span class="hljs-string">'contentlayer/source-files'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Post</span> = <span class="hljs-title function_">defineDocumentType</span>(<span class="hljs-function">() =></span> ({
  <span class="hljs-attr">name</span>: <span class="hljs-string">'Post'</span>,
  <span class="hljs-attr">filePathPattern</span>: <span class="hljs-string">`**/*.md`</span>,
  <span class="hljs-attr">fields</span>: {
    <span class="hljs-attr">title</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">'string'</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> },
    <span class="hljs-attr">date</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">'date'</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> },
  },
  <span class="hljs-attr">computedFields</span>: {
    <span class="hljs-attr">url</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-string">'string'</span>,
      <span class="hljs-attr">resolve</span>: <span class="hljs-function">(<span class="hljs-params">post</span>) =></span> <span class="hljs-string">`/posts/<span class="hljs-subst">${post._raw.flattenedPath}</span>`</span>,
    },
  },
}))

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">makeSource</span>({ <span class="hljs-attr">contentDirPath</span>: <span class="hljs-string">'posts'</span>, <span class="hljs-attr">documentTypes</span>: [<span class="hljs-title class_">Post</span>] })
</code></pre>
<ul>
<li><code>Post</code> 타입의 문서들은 <code>posts</code> 디렉토리 안의 마크다운 파일이어야 한다.</li>
<li><code>fields</code> 옵션은 마크다운 파일 front-matter에 반드시 있어야 하는 항목들이다.</li>
<li><code>computedFields</code> 옵션은 front-matter에는 없지만 contentlayer가 문서 객체를 만들 때 필드로 생성되는 부분이다.</li>
</ul>
<h2>파일 예시</h2>
<h3>폴더 구조 예시</h3>
<pre><code class="hljs language-txt">posts/
├── post-01.md
├── post-02.md
└── post-03.md
</code></pre>
<h3>마크다운 파일 예시</h3>
<pre><code class="hljs language-txt">---
title: My First Post
date: 2021-12-24
---

Ullamco et nostrud magna commodo nostrud ...
</code></pre>
<h1>웹페이지에 출력</h1>
<p><code>app/page.tsx</code>에 아래 코드를 입력한다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-comment">// app/page.tsx</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Link</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'next/link'</span>
<span class="hljs-keyword">import</span> { compareDesc, format, parseISO } <span class="hljs-keyword">from</span> <span class="hljs-string">'date-fns'</span>
<span class="hljs-keyword">import</span> { allPosts, <span class="hljs-title class_">Post</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'contentlayer/generated'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">PostCard</span>(<span class="hljs-params">post: Post</span>) {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-1 text-xl"</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">Link</span>
          <span class="hljs-attr">href</span>=<span class="hljs-string">{post.url}</span>
          <span class="hljs-attr">className</span>=<span class="hljs-string">"text-blue-700 hover:text-blue-900 dark:text-blue-400"</span>
        ></span>
          {post.title}
        <span class="hljs-tag">&#x3C;/<span class="hljs-name">Link</span>></span>
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">h2</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">time</span> <span class="hljs-attr">dateTime</span>=<span class="hljs-string">{post.date}</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-2 block text-xs text-gray-600"</span>></span>
        {format(parseISO(post.date), 'LLLL d, yyyy')}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">time</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"text-sm [&#x26;>*]:mb-3 [&#x26;>*:last-child]:mb-0"</span>
        <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">post.body.html</span> }}
      /></span>
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> posts = allPosts.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span>
    <span class="hljs-title function_">compareDesc</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(a.<span class="hljs-property">date</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(b.<span class="hljs-property">date</span>))
  )

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mx-auto max-w-xl py-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8 text-center text-2xl font-black"</span>></span>
        Next.js + Contentlayer Example
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span>
      {posts.map((post, idx) => (
        <span class="hljs-tag">&#x3C;<span class="hljs-name">PostCard</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{idx}</span> {<span class="hljs-attr">...post</span>} /></span>
      ))}
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  )
}
</code></pre>
<p><code>contentlayer/generated</code>를 import 하는 부분에서 에러가 발생한다. 서버를 시작할 때, contentlayer가 대상 폴더를 읽어서 루트 디렉토리에 <code>.contentlayer/generated</code>라는 폴더를 만드는데, 아직 서버가 실행된 적이 없어 이 폴더가 생성되지 않았기 때문이다. 서버가 실행되면 없어지니 무시해도 된다.</p>
<p>다음으로, 마크다운을 출력하는 페이지를 만든다.
<code>app/posts/[slug]/page.tsx</code>을 생성하고 아래 코드를 입력한다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-comment">// app/posts/[slug]/page.tsx</span>
<span class="hljs-keyword">import</span> { format, parseISO } <span class="hljs-keyword">from</span> <span class="hljs-string">'date-fns'</span>
<span class="hljs-keyword">import</span> { allPosts } <span class="hljs-keyword">from</span> <span class="hljs-string">'contentlayer/generated'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateStaticParams</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =>
  allPosts.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">post</span>) =></span> ({ <span class="hljs-attr">slug</span>: post.<span class="hljs-property">_raw</span>.<span class="hljs-property">flattenedPath</span> }))

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateMetadata</span> = (<span class="hljs-params">{ params }: { params: { slug: <span class="hljs-built_in">string</span> } }</span>) => {
  <span class="hljs-keyword">const</span> post = allPosts.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">post</span>) =></span> post.<span class="hljs-property">_raw</span>.<span class="hljs-property">flattenedPath</span> === params.<span class="hljs-property">slug</span>)
  <span class="hljs-keyword">if</span> (!post) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Post not found for slug: <span class="hljs-subst">${params.slug}</span>`</span>)
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">title</span>: post.<span class="hljs-property">title</span> }
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">PostLayout</span> = (<span class="hljs-params">{ params }: { params: { slug: <span class="hljs-built_in">string</span> } }</span>) => {
  <span class="hljs-keyword">const</span> post = allPosts.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">post</span>) =></span> post.<span class="hljs-property">_raw</span>.<span class="hljs-property">flattenedPath</span> === params.<span class="hljs-property">slug</span>)
  <span class="hljs-keyword">if</span> (!post) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Post not found for slug: <span class="hljs-subst">${params.slug}</span>`</span>)

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">article</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mx-auto max-w-xl py-8"</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-8 text-center"</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">time</span> <span class="hljs-attr">dateTime</span>=<span class="hljs-string">{post.date}</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"mb-1 text-xs text-gray-600"</span>></span>
          {format(parseISO(post.date), 'LLLL d, yyyy')}
        <span class="hljs-tag">&#x3C;/<span class="hljs-name">time</span>></span>
        <span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"text-3xl font-bold"</span>></span>{post.title}<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span>
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
      <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">className</span>=<span class="hljs-string">"[&#x26;>*]:mb-3 [&#x26;>*:last-child]:mb-0"</span>
        <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">post.body.html</span> }}
      /></span>
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">article</span>></span></span>
  )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PostLayout</span>
</code></pre>
<p>앱을 실행시킨다.</p>
<pre><code class="hljs language-txt">npm run dev
</code></pre>
<p>페이지를 열어보면 글 목록이 있고, 제목을 클릭하면 글을 볼 수 있다.</p>
<h1>주의</h1>
<p>turbopack을 사용하니 <code>.contentlayer</code> 폴더가 아예 생성되지 않았다. 꼭 turbopack 옵션은 끄고 서버를 실행해야 한다.</p>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,200px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next.js",{"href":"/blog/GitHub Pages + Next.js","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next.js"}],["$","span",null,{"className":"text-gray-400","children":["(",9,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","GitHub%20Pages%20%2B%20Next.js","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","03-contentlayer","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"mb-1 text-3xl font-bold","children":"Contentlayer로 마크다운 파일 읽기"}],["$","time",null,{"dateTime":"2023-11-16T12:58:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2023. 11. 16. 21:58"}]]}],["$","div",null,{"className":"markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"GitHub Pages + Next.js\",\"post\":\"03-contentlayer\"}"},"styles":null}],"segment":["post","03-contentlayer","d"]},"styles":null}],"segment":["board","GitHub%20Pages%20%2B%20Next.js","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Contentlayer로 마크다운 파일 읽기 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
