1:HL["/_next/static/css/91417e851664d5e6.css","style",{"crossOrigin":""}]
0:["do94uUDEZXsSVKajn7tGk",[[["",{"children":["blog",{"children":[["board","PC%20Community","d"],{"children":[["post","2021-08-12-004-link-react-express","d"],{"children":["__PAGE__?{\"board\":\"PC Community\",\"post\":\"2021-08-12-004-link-react-express\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/91417e851664d5e6.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-3fc148124fdeb158.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-3fc148124fdeb158.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","PC%20Community","d"]
b:T24c5,<p>연동하는 두 가지 방법을 찾았다.</p>
<ul>
<li>Express의 view 부분을 React로 만든 HTML로 대체</li>
<li>React 서버와 Express 서버를 연동</li>
</ul>
<h1>1. Express의 view를 React로</h1>
<p>내가 처음 생각했던 방법은 이 방법이었다.
Express 만으로도 충분히 웹을 만들 수 있었기 때문이다.
Express를 배울 때, HTML 파일을 통해 페이지를 render 하는 것을 보고 이 부분만 React로 바꿔주면 된다고 생각했다.</p>
<p>그런데 구글링을 해 보니 대부분 React와 Express 서버를 각각 실행하고 둘을 연동하는 방법이 대부분이었다.
서버를 두 개나 실행하지 않고 한 개로 해결하고 싶어서 더 알아봤는데 당장 사용하기는 힘들어보였다.</p>
<p>방법은 React로 작업을 완성하고 build한 뒤 Express의 view로 설정해 주는 것이다.
자세히 알아보지는 않았지만 React 파일이 수정될 때마다 다시 build를 해서 Express로 옮겨줘야 될 것 같았다.
나는 React를 작업하면서 동시에 Express를 만들 것이기 때문에 이 방법은 넘어갔다.</p>
<blockquote>
<p>나중에 실제로 배포할 때가 되면 자세히 알아보려고 한다.</p>
</blockquote>
<h1>2. React 서버와 Express 서버를 연동</h1>
<p>구글링 해서 나온 결과가 대부분 이 방법이라서 따라하는 데 어려움이 없었다.
처음에는 복잡하게 느껴졌지만 막상 해보니 간단하고 원리도 어렵지 않았다.</p>
<p>이 방법을 사용하면 React 서버와 Express 서버가 모두 켜져야 한다.
사용자는 url을 통해 React 서버로 접속한다.
React 서버는 사용자가 요청한 정보를 돌려줘야 하는데, 이 때 필요한 내용을 Express 서버에 요청하는 방식이다.
React는 Express에서 받은 정보를 화면에 그린 뒤 사용자에게 돌려준다.</p>
<p>그러기 위해서는 React와 Express 서버를 별도의 포트로 켜고, React의 package.json에 프록시를 추가해야 한다.
React와 Express 모두 기본적으로 3000번 포트를 사용하는데, 둘 중 하나를 다른 포트로 바꿔주면 된다.
</p>
<h2>React 포트 변경하기</h2>
<p>React의 포트를 변경하는 방법은 여러가지가 있다.</p>
<h3>1) 명령어로 실행하기</h3>
<p>명령어에 포트 번호를 지정하여 서버를 실행시키는 방법이다.
기본값인 3000번 포트는 설정 파일에 저장되어 있으므로 이 방법은 일회성인 방법이다.</p>
<pre><code>> PORT=3001 npm start
</code></pre>
<p>cmd에서는 아래 명령은 가능했다.</p>
<pre><code>> set PORT=3001 &#x26;&#x26; npm start
</code></pre>
<blockquote>
<p>왜 안되는지 알려면 powershell과 cmd에 대해 공부해야 할 것 같다.</p>
</blockquote>
<pre><code>Compiled successfully!

You can now view client in the browser.

  Local:            http://localhost:3001
  On Your Network:  http://192.168.219.109:3001

Note that the development build is not optimized.
To create a production build, use yarn build.
</code></pre>
<p>포트 번호가 3001로 바뀐 것을 확인할 수 있다.</p>
<h3>2) package.json 수정하기</h3>
<p>React 서버를 실행시킬 때는 <code>npm start</code> 명령을 이용하는데, 이 때 무슨 명령을 실행할 지가 <code>package.json</code>에 저장되어 있다.</p>
<pre><code class="language-json">"scripts": {
    "start": "react-scripts start",
    ...
}
</code></pre>
<p>이것이 기본 설정이다.
<code>npm start</code>를 실행하면 <code>react-scripts start</code>라는 명령이 실행된다는 뜻이다.
여기에 포트 번호를 지정해주면 앞으로 <code>npm start</code>를 쓸 때마다 지정된 포트로 열리게 된다.</p>
<h4>Windows</h4>
<pre><code class="language-json">"scripts": {
    "start": "set PORT=3001 &#x26;&#x26; react-scripts start",
    ...
}
</code></pre>
<h4>Linux, Mac OS</h4>
<pre><code class="language-json">"scripts": {
    "start": "export PORT=3001 &#x26;&#x26; react-scripts start",
    ...
}
</code></pre>
<blockquote>
<p>이 방법이 가장 사용하기 편리한 것 같다.</p>
</blockquote>
<h3>3) .env 파일 생성하기</h3>
<p>프로젝트 폴더에 ".env"라는 이름의 파일을 생성한다.
파일에 원하는 포트 번호를 적고 <code>npm start</code>를 실행시키면 된다.</p>
<p>.env 파일</p>
<pre><code>PORT=3001
</code></pre>
<pre><code>> npm start
</code></pre>
<h3>4) 포트 설정 변경하기</h3>
<p>3000번으로 설정된 기본 설정값을 변경하는 것이다.</p>
<p>프로젝트 폴더의 <code>node_modules/react-scripts/scripts/start.js</code> 파일에 설정값이 있다.</p>
<pre><code class="language-js">const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3001;
const HOST = process.env.HOST || '0.0.0.0';
</code></pre>
<p><code>DEFAULT_PORT</code>의 맨 오른쪽 숫자를 원하는 포트 번호로 바꿔주면 된다.</p>
<h2>Express 포트 변경하기</h2>
<p>Express의 포트를 바꾸는 방법은 간단하다.
명령어로 포트를 지정해서 실행해도 되지만 설정 파일을 쉽게 찾을 수 있다.</p>
<p>프로젝트 폴더의 <code>bin/www</code> 파일에 설정값이 있다.</p>
<pre><code class="language-js">var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
</code></pre>
<p><code>port</code>의 맨 오른쪽 숫자를 원하는 포트 번호로 바꿔주면 된다.</p>
<p>나는 React는 3000번으로 놔두고, Express를 3001번으로 바꿔서 사용했다.</p>
<h2>React의 package.json에 프록시 추가하기</h2>
<p>React 프로젝트 폴더의 <code>package.json</code> 파일에서 프록시를 추가할 수 있다.</p>
<pre><code class="language-json">"proxy": "http://localhost:3001"
</code></pre>
<p>이렇게 하면 React에서 정보를 요청할 때 Express 서버(3001번 포트)로 요청하게 된다.
예를 들어, React에서 <code>/users</code>로 요청을 보내면 <code>http://localhost:3001/users</code>로 요청이 간다.</p>
<h2>간단하게 정보 주고받기</h2>
<p>Express에서 텍스트 정보를 받아와 React로 출력하는 페이지를 간단하게 만들어 보았다.</p>
<pre><code class="language-js">import usersRouter from './routes/users';

app.use('/users', usersRouter);
</code></pre>
<p>라우터를 통해 <code>/users</code>로 들어온 요청을 <code>./routes/users.js</code>로 보낸다.</p>
<pre><code class="language-js">router.get('/', function (req, res, next) {
  res.json({
    title: 'Users Page',
    content: 'User Info',
  });
});
</code></pre>
<p>GET 방식으로 요청이 들어오면 위의 json 파일을 돌려준다.</p>
<pre><code class="language-jsx">class App extends React.Component {
  state = {
    isLoading: true,
    title: null,
    content: null,
    data: [],
  };

  async getUsers() {
    const res = await axios.get('/users');
    this.setState({
      isLoading: false,
      title: res.data.title,
      content: res.data.content,
    });
  }

  componentDidMount() {
    this.getUsers();
  }

  render() {
    const { isLoading, title, content } = this.state;
    return (
      &#x3C;div>
        {isLoading ? (
          &#x3C;div>Loading...&#x3C;/div>
        ) : (
          &#x3C;div>
            &#x3C;h1>{title}&#x3C;/h1>
            &#x3C;p>{content}&#x3C;/p>
          &#x3C;/div>
        )}
      &#x3C;/div>
    );
  }
}
</code></pre>
<p>React 서버 주소(http://localhost:3000)로 접속하면 React는 <code>/users</code>에서 정보를 받아 화면에 출력한다.
이 때 <code>/users</code>의 주소는 <code>package.json</code>의 프록시 주소를 기반으로 한다.
결과적으로 <code>http://localhost:3001/users</code>에 요청하는 것이다.</p>
<p><img src="https://user-images.githubusercontent.com/86853786/129202000-2224916b-4b46-4600-bc56-c9502ad75a60.png" alt="image"></p>
<p>내가 이해한 작동 순서는 다음과 같다.</p>
<ol>
<li>사용자가 React 서버에 접속한다.</li>
<li>React는 App 컴포넌트를 그린다.</li>
<li>그리는 과정에서 Express 서버에 <code>/users</code>로 정보를 요청한다.</li>
<li>Express 서버는 <code>/users</code>에 해당하는 라우터로 이동하여 json을 돌려준다.</li>
<li>React는 받은 json을 이용하여 화면을 다시 그린다.</li>
<li>사용자가 페이지를 확인한다.</li>
</ol>
<h1>3. 서버 분리는 어떻게?</h1>
<p>기본적인 것들을 만들고 보니 순서가 좀 이상하다.
백엔드는 외부 api와 연결하려고 했는데, 그러면 프론트는 백엔드로 api 요청을 하고 백엔드는 외부로 api 요청을 한다.
이럴거면 React에서 외부 api를 바로 이용하는 것보다 나을 게 없어 보인다.
물론 최종적으로 만드려는 앱은 하루에 한 번씩 백엔드 서버에 정보를 가공해서 저장되는 형태이지만 다른 방법이 필요하다.</p>
<blockquote>
<p>내가 작성한 코드는 순서가 사용자-프론트엔드-백엔드 순이다.
그러나 React와 Express를 이용하여 사용자-백엔드-프론드엔드 순으로도 구성할 수 있다고 한다.
나중에 알아보자.</p>
</blockquote>
<p>공부하면서 이해한 대로 적은 것이므로 잘못된 정보가 있을 수 있습니다.</p>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,200px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Linux",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Linux"}],[["$","$L5","basic",{"href":"/blog/basic","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"basic"}],["$","span",null,{"className":"text-gray-400","children":["(",7,")"]}]]}]]]}],["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next",{"href":"/blog/GitHub Pages + Next","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next"}],["$","span",null,{"className":"text-gray-400","children":["(",1,")"]}]]}],["$","$L5","Github pages",{"href":"/blog/Github pages","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"Github pages"}],["$","span",null,{"className":"text-gray-400","children":["(",15,")"]}]]}],["$","$L5","PC Community",{"href":"/blog/PC Community","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"PC Community"}],["$","span",null,{"className":"text-gray-400","children":["(",8,")"]}]]}],["$","$L5","온라인 명륜당",{"href":"/blog/온라인 명륜당","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"온라인 명륜당"}],["$","span",null,{"className":"text-gray-400","children":["(",0,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","PC%20Community","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","2021-08-12-004-link-react-express","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"text-3xl font-bold","children":"학생 커뮤니티 사이트 제작 (4) - React와 Express 연동"}],["$","time",null,{"dateTime":"2021-08-11T00:00:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2021. 08. 11."}]]}],["$","div",null,{"className":"[&>*]:mb-3 [&>*:last-child]:mb-0 markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"PC Community\",\"post\":\"2021-08-12-004-link-react-express\"}"},"styles":null}],"segment":["post","2021-08-12-004-link-react-express","d"]},"styles":null}],"segment":["board","PC%20Community","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"학생 커뮤니티 사이트 제작 (4) - React와 Express 연동 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
