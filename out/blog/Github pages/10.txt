1:HL["/_next/static/css/91417e851664d5e6.css","style",{"crossOrigin":""}]
0:["do94uUDEZXsSVKajn7tGk",[[["",{"children":["blog",{"children":[["board","Github%20pages","d"],{"children":[["post","10","d"],{"children":["__PAGE__?{\"board\":\"Github pages\",\"post\":\"10\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/91417e851664d5e6.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2649,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-3fc148124fdeb158.js"],"CustomThemeProvider"]
5:I[8326,["326","static/chunks/326-9823f391d24e26fc.js","431","static/chunks/app/blog/%5Bboard%5D/page-86149bc53665de2b.js"],""]
6:I[5235,["326","static/chunks/326-9823f391d24e26fc.js","185","static/chunks/app/layout-3fc148124fdeb158.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:["board","Github%20pages","d"]
b:T5b14,<p>Jekyll은 페이지의 HTML을 만들 때 Liquid라는 언어를 사용한다. Liquid를 알면 <code>minimal-mistakes</code>에서 기본적으로 제공하는 레이아웃을 내가 원하는 대로 수정할 수 있다. 다음에는 사이드 바에 네비게이션을 만들건데, Liquid를 알아야만 해서 Liquid를 먼저 소개한다.</p>
<p>자세한 내용은 아래 사이트 참고.</p>
<blockquote>
<p><a href="https://shopify.github.io/liquid/">Liquid</a></p>
</blockquote>
<p></p>
<h1>1. 시작</h1>
<p>Liquid는 <strong>객체</strong>(objects), <strong>태그</strong>(tags), <strong>필터</strong>(filters)로 이루어져 있다.</p>
<h2>객체 Objects</h2>
<p>객체는 정보를 담고 있다. 객체를 출력하기 위해서는 {% raw %}<code>{{ }}</code>{% endraw %}로 감싸주면 된다.</p>
<pre><code class="language-r">{% raw %}{{ page.title }}{% endraw %}    # page.title을 화면에 출력
</code></pre>
<pre><code>{{ page.title }}
</code></pre>
<blockquote>
<p><code>page.title</code>은 이 글의 마크다운을 작성할 때 Front Matter에 적은 <code>title</code>값을 의미한다. 따라서 이 글의 제목이 출력되었다.</p>
</blockquote>
<h2>태그 Tags</h2>
<p>태그는 프로그램 흐름 제어나 변수 할당을 위해 사용된다. {% raw %}<code>{% %}</code>{% endraw %}로 감싸주면 된다. 여기에 들어있는 것은 HTML을 렌더링할 때 사용할 뿐, 화면에 출력되지는 않는다.</p>
<pre><code class="language-r">{% raw %}{% if true %}    # 조건이 true일 때 page.title을 출력
  {{ page. title }}
{% endif %}{% endraw %}
</code></pre>
<pre><code>{% if true %}{{ page. title }}{% endif %}
</code></pre>
<h2>필터 Filters</h2>
<p>필터는 객체나 변수의 출력을 바꿔주는 기능이다. 파이썬의 메소드같은 역할이다. {% raw %}<code>{{ }}</code>{% endraw %} 안에서 사용하고, 필터는 <code>|</code>로 구분한다.</p>
<p>예를 들어, <code>size</code>는 문자열의 문자 개수나 배열의 길이를 반환하는 필터이다.</p>
<pre><code class="language-r">{% raw %}{{ page.title | size }}           # String
{{ "Hello world" | size }}        # String

{% assign names = "Tom,Bob,James" | split: ',' %}
# names = ["Tom", "Bob", "James"]
{{ names | size }}    # Array{% endraw %}
</code></pre>
<pre><code>{{ page.title | size }}
{{ "Hello world" | size }}
{% assign names = "Tom,Bob,James" | split: ',' %}{{ names | size }}
</code></pre>
<hr>
<h1>2. 연산자 Operators</h1>
<h2>기본 연산자</h2>
<p>| <code>==</code> | 같다 |
| <code>!=</code> | 같지 않다 |
| <code>></code> | 크다 |
| <code>&#x3C;</code> | 작다 |
| <code>>=</code> | 크거나 같다 |
| <code>&#x3C;=</code> | 작거나 같다 |
| <code>or</code> | 논리연산자 '또는' |
| <code>and</code> | 논리연산자 '그리고' |</p>
<h2>contains</h2>
<p><code>contains</code>는 문자열이 특정 문자열을 포함하고 있는지 확인한다.</p>
<pre><code class="language-r">{% raw %}{% if "Hello world" contains "world" %}
  true
{% endif %}{% endraw %}
</code></pre>
<pre><code>{% if "Hello world" contains "world" %}true{% endif %}
</code></pre>
<p></p>
<p><code>contains</code>는 문자열로 이루어진 배열에 특정 문자열이 있는지도 확인한다.</p>
<pre><code class="language-r">{% raw %}{% assign greeting = "Hello,world" | split: ',' %}    # ["Hello", "world"]라는 배열 생성
{% if greeting contains "world" %}
  true
{% endif %}{% endraw %}
</code></pre>
<pre><code>{% assign greeting = "Hello,world" | split: ',' %}{% if greeting contains "world" %}true{% endif %}
</code></pre>
<h2>논리 연산 순서</h2>
<p>태그에 <code>and</code>나 <code>or</code>가 한 개 이상 들어있다면 연산 순서는 항상 오른쪽에서 왼쪽으로 간다. 소괄호를 사용해서 순서를 바꿀 수 없다.</p>
<pre><code class="language-r">{% raw %}{% if true and false and false or true %}
  This evaluates to false, since the tags are checked like this:

  true and (false and (false or true))
  true and (false and true)
  true and false
  false

{% endif %}{% endraw %}
</code></pre>
<hr>
<h1>3. 자료형 Types</h1>
<p>Liquid에는 6개의 자료형이 있다.</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Nil</li>
<li>Array</li>
<li>EmptyDrop</li>
</ul>
<h2>String</h2>
<p>String은 <code>'</code>나 <code>"</code>로 표현한다.</p>
<pre><code class="language-r">{% raw %}{% assign my_string = "Hello World!" %}{% endraw %}
</code></pre>
<h2>Number</h2>
<p>Number는 정수와 실수를 포함한다.</p>
<pre><code class="language-r">{% raw %}{% assign my_int = 25 %}
{% assign my_float = -39.756 %}{% endraw %}
</code></pre>
<h2>Boolean</h2>
<p>Boolean에는 <code>true</code>와 <code>false</code>가 있다.</p>
<pre><code class="language-r">{% raw %}{% assign foo = true %}
{% assign bar = false %}{% endraw %}
</code></pre>
<h2>Nil</h2>
<p>Nil은 Liquid 코드 실행의 결과가 없을 때 생기는 빈 값이다. 코드를 작성할 때 코드에 <code>nil</code>을 직접 표기할 수 없다. <code>nil</code>은 false로 간주한다.</p>
<pre><code class="language-r">{% raw %}{% if no_value %}    # no_value는 선언하지 않았다.
  true
{% else %}
  false
{% endif %}{% endraw %}
</code></pre>
<pre><code>{% if no_value %}true{% else %}false{% endif %}
</code></pre>
<p></p>
<pre><code class="language-r">{% raw %}{% if page %}                          # page는 존재하는 변수이므로 if문 내부가 실행된다.
  Print page.abcd : {{ page.abcd }}    # page.abcd는 존재하지 않아 nil이 반환된다.
{% endif %}{% endraw %}
</code></pre>
<pre><code>{% if page %}Print page.abcd : {{ page.abcd }}{% endif %}
</code></pre>
<h2>Array</h2>
<p>Array는 어떤 자료형이든 담을 수 있다.</p>
<h3>생성</h3>
<p>Array를 초기화하는 문법은 없다. 하지만 <code>split</code> 필터를 이용하면 문자열 배열은 만들 수 있다.</p>
<pre><code class="language-r">{% raw %}{% assign users = "Tom,Bob,James,John" | split: '.' %}{% endraw %}
</code></pre>
<h3>접근</h3>
<p><code>[ ]</code>를 사용하여 배열의 요소에 접근할 수 있다. 인덱스는 0부터 시작하고, 음수는 배열의 끝에서부터 역순으로 센다.</p>
<pre><code class="language-r">{% raw %}{% assign users = "Tom,Bob,James,John" | split: '.' %}
{{ users[0] }}
{{ users[1] }}
{{ users[-1] }}
{{ users[-2] }}{% endraw %}
</code></pre>
<pre><code>{% assign users = "Tom,Bob,James,John" | split: ',' %}{{ users[0] }}
{{ users[1] }}
{{ users[-1] }}
{{ users[-2] }}
</code></pre>
<h2>EmptyDrop</h2>
<p>EmptyDrop은 삭제된 객체에 접근할 때 반환되는 객체이다.</p>
<pre><code class="language-r">{% raw %}{% assign variable = "hello" %}
{% assign page_1 = pages[variable] %}
{% assign page_2 = pages["does-not-exist"] %}
{% assign page_3 = pages.this-handle-does-not-exist %}{% endraw %}
</code></pre>
<p><code>page_1</code>, <code>page_2</code>, <code>page_3</code>은 모두 EmptyDrop 객체이다.</p>
<h3>EmptyDrop인지 확인하기</h3>
<p>객체를 <code>empty</code>와 비교하여 객체가 EmptyDrop인지 확인할 수 있다.</p>
<pre><code class="language-r">{% raw %}{% unless pages == empty %}
  제목 : {{ page.title }}
  카테고리 : {{ page.categories }}
{% endunless %}{% endraw %}
</code></pre>
<pre><code>{% unless pages == empty %}제목 : {{ page.title }}
카테고리 : {{ page.categories }}{% endunless %}
</code></pre>
<p>빈 문자열이나 빈 배열도 <code>empty</code>와 비교하면 <code>true</code>가 나온다.</p>
<hr>
<h1>4. 참과 거짓 Truthy and falsy</h1>
<p>Liquid에서는 <code>nil</code>과 <code>false</code>를 제외한 모든 값은 <code>true</code>이다. 빈 문자열과 빈 배열, 0, EmptyDrop도 모두 <code>true</code>이다.</p>
<p>|              | truthy | falsy |
| ------------ | :----: | :---: |
| true         |   •    |       |
| false        |        |   •   |
| nil          |        |   •   |
| string       |   •    |       |
| empty string |   •    |       |
| 0            |   •    |       |
| integer      |   •    |       |
| float        |   •    |       |
| array        |   •    |       |
| empty array  |   •    |       |
| page         |   •    |       |
| EmptyDrop    |   •    |       |</p>
<hr>
<h1>5. 조건문 Control flow</h1>
<h2>if</h2>
<p>조건이 <code>true</code>일 때 해당 블럭을 실행한다.</p>
<pre><code class="language-r">{% raw %}{% if page.title == "Github Pages" %}
  This page is "Github Pages".
{% endif %}{% endraw %}
</code></pre>
<h2>unless</h2>
<p><code>if</code>의 반대이다. 조건이 충족되지 않으면 해당 블럭을 실행한다.</p>
<pre><code class="language-r">{% raw %}{% unless page.title == "Github Pages" %}
  This page is "Github Pages".
{% endunless %}{% endraw %}
</code></pre>
<h2>elsif / else</h2>
<p><code>if</code>와 <code>unless</code>에 조건을 추가할 수 있다.</p>
<pre><code class="language-r">{% raw %}{% if page.title == "Github Pages" %}
  This page is "Github Pages".
{% elsif page.title == "git" %}
  This page is "git".
{% endif %}{% endraw %}
</code></pre>
<h2>case / when</h2>
<p>스위치문을 만든다. 마지막에 <code>else</code>를 넣어서 해당하는 조건이 없을 때 실행할 블럭을 만들 수 있다.</p>
<pre><code class="language-r">{% raw %}{% case handle %}
  {% when "cake" %}
     This is a cake
  {% when "cookie", "biscuit" %}
     This is a cookie
  {% else %}
     This is not a cake nor a cookie
{% endcase %}{% endraw %}
</code></pre>
<hr>
<h1>6. 반복문 Iteration</h1>
<p>반복문의 기본 형태는 다음과 같다.</p>
<pre><code class="language-r">{% raw %}{% for item in iterable_object %}
  statements
{% endfor %}{% endraw %}
</code></pre>
<p></p>
<pre><code class="language-r">{% raw %}{% assign fruits = "Apple,Banana,Cherry,Orange,Strawberry" | split: ',' %}
# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% assign fruits = "Apple,Banana,Cherry,Orange,Strawberry" | split: ',' %}{% for fruit in fruits %}{{ fruit }} {% endfor %}
</code></pre>
<h2>else</h2>
<p><code>else</code> 아래 블럭은 루프의 길이가 0일 때 실행되는 부분이다.</p>
<pre><code class="language-r">{% raw %}{% assign emptystring = "" %}

{% for character in emptystring %}
  {{ character }}
{% else %}
  String is empty.
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% assign emptystring = "" %}{% for character in emptystring %}{{ character }}{% else %}String is empty.{% endfor %}
</code></pre>
<h2>break</h2>
<p><code>break</code>가 실행되면 반복문을 멈춘다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {% if fruit == "Orange" %}    # Orange를 만나면 즉시 중지한다.
    {% break %}
  {% else %}
    {{ fruit }}
  {% endif %}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{% if fruit == "Orange" %}{% break %}{% else%}{{ fruit }} {% endif%}{% endfor %}
</code></pre>
<h2>continue</h2>
<p><code>continue</code>가 실행되면 다음 반복으로 넘어간다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {% if fruit == "Orange" %}    # Orange를 만나면 다음 과일로 넘어간다.
    {% continue %}
  {% else %}
    {{ fruit }}
  {% endif %}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{% if fruit == "Orange" %}{% continue %}{% else%}{{ fruit }} {% endif%}{% endfor %}
</code></pre>
<h2>limit</h2>
<p>루프의 반복 횟수를 제한한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits limit:2 %}    # 루프를 2번만 실행한다.
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits limit:2 %}{{ fruit }} {% endfor %}
</code></pre>
<h2>offset</h2>
<p>루프의 시작 지점을 설정한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits offset:2 %}    # 루프를 2번만 실행한다.
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits offset:2 %}{{ fruit }} {% endfor %}
</code></pre>
<p><code>offset</code>에 <code>continue</code>를 넣으면 이전 반복문에서 마지막으로 사용한 항목에 이어서 반복한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits limit:2 %}    # 루프를 2번만 실행한다.
  {{ fruit }}
{% endfor %}

{% for fruit in fruits offset:continue %}    # 3번째 항목부터 이어서 시작한다.
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits limit:2 %}{{ fruit }} {% endfor %}
{% for fruit in fruits offset:continue %}{{ fruit }} {% endfor %}
</code></pre>
<h2>range</h2>
<p><code>range</code>는 iterable한 연속된 자연수의 객체를 만든다.</p>
<pre><code>(a..b)
</code></pre>
<p><code>a</code> ~ <code>b</code>까지의 자연수가 들어있다. <code>b</code>도 포함한다. 숫자 대신 변수를 사용해도 된다.</p>
<pre><code class="language-r">{% raw %}{% for i in (3..6) %}
  {{ i }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for i in (3..6) %}{{ i }} {% endfor %}
</code></pre>
<h2>reversed</h2>
<p><code>reversed</code>는 루프의 순서를 거꾸로 뒤집는다. 필터의 <code>reverse</code>와는 별개이다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits reversed %}
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits reversed %}{{ fruit }} {% endfor %}
</code></pre>
<h2>forloop 객체</h2>
<p><code>forloop</code> 객체는 자신의 부모 <code>for</code> 루프의 여러 속성들을 가지고 있다.</p>
<h3>forloop.first</h3>
<p>첫번째 루프일 때 <code>true</code>를 반환한다. 첫번째가 아닐 때는 <code>false</code>를 반환한다.</p>
<pre><code class="language-r">{% raw %}{% for i in (1..4) %}
  {% if forloop.first %}
    This is first loop.
  {% else %}
    {{ i }}
  {% endif %}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>This is first loop.
2
3
4
</code></pre>
<h3>forloop.last</h3>
<p>마지막 루프일 때 <code>true</code>를 반환한다. 마지막이 아닐 때는 <code>false</code>를 반환한다.</p>
<pre><code class="language-r">{% raw %}{% for i in (1..4) %}
  {% if forloop.last %}
    This is last loop.
  {% else %}
    {{ i }}
  {% endif %}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>1
2
3
This is last loop.
</code></pre>
<h3>forloop.length</h3>
<p>루프의 반복 횟수를 반환한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {% if forloop.first %}
    There are {{ forloop.length }} fruits.
  {% endif %}
  {{ fruit }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>There are 5 fruits.
Apple
Banana
Cherry
Orange
Strawberry
</code></pre>
<h3>forloop.index</h3>
<p>현재 루프의 인덱스를 반환한다. <code>1</code>부터 시작한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {{ forloop.index }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{{ forloop.index }} {% endfor %}
</code></pre>
<h3>forloop.index0</h3>
<p>현재 루프의 인덱스를 반환한다. <code>0</code>부터 시작한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {{ forloop.index0 }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{{ forloop.index0 }} {% endfor %}
</code></pre>
<h3>forloop.rindex</h3>
<p>현재 루프의 인덱스를 뒤집어서 반환한다. <code>1</code>부터 시작한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {{ forloop.rindex }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{{ forloop.index }} {% endfor %}
</code></pre>
<h3>forloop.rindex0</h3>
<p>현재 루프의 인덱스를 뒤집어서 반환한다. <code>0</code>부터 시작한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% for fruit in fruits %}
  {{ forloop.rindex0 }}
{% endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{{ forloop.index0 }} {% endfor %}
</code></pre>
<hr>
<h1>7. 변수 Variable</h1>
<h2>assign</h2>
<p>새로운 변수에 값을 할당한다.</p>
<pre><code class="language-r">{% raw %}{% assign my_boolean = true %}
{% assign my_number = 3 %}
{% assign my_string = "Hello world" %}{% endraw %}
</code></pre>
<h2>capture</h2>
<p>새로운 변수를 만들어 <code>capture</code> 태그 안의 내용을 할당한다. 문자열 형태로 저장된다.</p>
<pre><code class="language-r">{% raw %}{% capture my_variable %}I am being captured.{% endcapture %}
{{ my_variable }}{% endraw %}
</code></pre>
<pre><code>I am being captured.
</code></pre>
<h2>increment</h2>
<p>새 변수를 <code>0</code>으로 만든다. <code>increment</code>문을 실행할 때마다 현재 값을 먼저 출력하고 <code>1</code>씩 증가시킨다.</p>
<pre><code class="language-r">{% raw %}{% increment my_inc_counter %}
{% increment my_inc_counter %}
{% increment my_inc_counter %}
my_inc_counter: {{ my_inc_counter }}{% endraw %}
</code></pre>
<pre><code>{% increment my_inc_counter %}
{% increment my_inc_counter %}
{% increment my_inc_counter %}
my_inc_counter: {{ my_inc_counter }}
</code></pre>
<p>이미 선언된 변수를 대상으로 할 경우, 변수의 값은 변하지 않는다. <code>increment</code>문이 출력하는 값은 <code>increment</code>문을 호출한 순서이다. <code>0</code>부터 시작한다.</p>
<pre><code class="language-r">{% raw %}{% assign inc_var = 10 %}
{% increment inc_var %}
{% increment inc_var %}
{% increment inc_var %}
inc_var: {{ inc_var }}{% endraw %}
</code></pre>
<pre><code>{% assign inc_var = 10 %}{% increment inc_var %}
{% increment inc_var %}
{% increment inc_var %}
inc_var: {{ inc_var }}
</code></pre>
<h2>decrement</h2>
<p>새 변수를 <code>0</code>으로 만든다. <code>decrement</code>문을 실행할 때마다 먼저 <code>1</code>씩 감소시키고 감소한 값을 출력한다. <code>increment</code>와는 차이가 있다.</p>
<pre><code class="language-r">{% raw %}{% decrement my_dec_counter %}
{% decrement my_dec_counter %}
{% decrement my_dec_counter %}
my_dec_counter: {{ my_dec_counter }}{% endraw %}
</code></pre>
<pre><code>{% decrement my_dec_counter %}
{% decrement my_dec_counter %}
{% decrement my_dec_counter %}
my_dec_counter: {{ my_dec_counter }}
</code></pre>
<p><code>increment</code>와 비슷하다. 변수의 값은 변하지 않는다. <code>decrement</code>문을 호출할 때마다 <code>-1</code>부터 숫자가 하나씩 낮아진다.</p>
<pre><code class="language-r">{% raw %}{% assign dec_var = 10 %}
{% decrement dec_var %}
{% decrement dec_var %}
{% decrement dec_var %}
dec_var: {{ dec_var }}{% endraw %}
</code></pre>
<pre><code>{% assign dec_var = 10 %}{% decrement dec_var %}
{% decrement dec_var %}
{% decrement dec_var %}
dec_var: {{ dec_var }}
</code></pre>
<hr>
<h1>8. 템플릿 Template</h1>
<h2>comment</h2>
<p>주석을 작성하는 태그이다.</p>
<pre><code class="language-r">{% raw %}{% comment %}이 사이는 주석으로 처리된다.{% endcomment %}{% endraw %}
</code></pre>
<h2>raw</h2>
<p>Liquid 태그를 그대로 텍스트로 출력하고 싶을 때 사용한다. <code>raw</code> 태그 안에 있는 Liquid 문법은 실행되지 않고 텍스트가 된다.</p>
<pre><code class="language-r">{% raw %}{% raw %}
  {% comment %}
    이 사이는 주석으로 처리된다.
  {% endcomment %}
  {{ page.title }}
{% endraw {% endraw %}{% raw %}%}{% endraw %}
</code></pre>
<h2>liquid (5.0.0)</h2>
<p>여러 개의 태그를 하나의 {% raw %}<code>{% %}</code>{% endraw %}로 처리할 수 있다.</p>
<pre><code class="language-r">{% raw %}{% liquid
case section.blocks.size
when 1
  assign column_size = ''
when 2
  assign column_size = 'one-half'
when 3
  assign column_size = 'one-third'
else
  assign column_size = 'one-quarter'
endcase %}{% endraw %}
</code></pre>
<h2>echo (5.0.0)</h2>
<p>{% raw %}<code>{{ }}</code>{% endraw %}와 같지만, <code>liquid</code> 태그 내에서 사용한다.</p>
<pre><code class="language-r">{% raw %}# fruits = ["Apple", "Banana", "Cherry", "Orange", "Strawberry"]

{% liquid
for fruit in fruits
  echo fruit
  echo " "
endfor %}{% endraw %}
</code></pre>
<pre><code>{% for fruit in fruits %}{{ fruit }} {% endfor %}
</code></pre>
<h2>render (5.0.0)</h2>
<p>현재 페이지에 다른 템플릿을 삽입한다.</p>
<pre><code class="language-r">{% raw %}{% render "template-name" %}{% endraw %}
</code></pre>
<p>삽입할 템플릿에 매개변수를 넘겨줄 수도 있다.</p>
<pre><code class="language-r">{% raw %}{% assign my_variable = "apples" %}
{% render "name", my_variable: my_variable, my_other_variable: "oranges" %}{% endraw %}
</code></pre>
<h2>include</h2>
<p><code>render</code>와 같은 기능이지만 이전 버전에서 사용한다. <code>5.0.0</code> 이상에서는 <code>render</code>를 사용하면 된다.</p>
<h2>Liquid 업데이트 하기</h2>
<p><code>minimal mistakes</code>를 복사해오니 버전이 <code>4.0.3</code>이었다. 버전 업데이트를 위해 <code>Gemfile</code>에 다음 줄을 추가해준다.</p>
<pre><code class="language-js">gem "liquid", "~> 5.0.0"
</code></pre>
<p>그리고 이 명령을 실행하면 Liquid가 업데이트된다.</p>
<pre><code>> bundle update liquid
</code></pre>
<blockquote>
<p>Liquid 버전 업데이트는 Github Pages에서는 적용되지 않았다. 로컬 환경에서는 사용할 수 있지만 Github에도 적용할 수 있는지는 모르겠다. 일단은 안쓰는게 좋을 것 같다.</p>
</blockquote>
<hr>
<h1>9. 필터 Filters</h1>
<p>필터는 많지만 자주 사용할 것 같은 필터만 정리해봤다.</p>
<h2>append</h2>
<h2>capitalize</h2>
<h2>compact</h2>
<p>배열에서 <code>nil</code>값을 제거한다.</p>
<h2>concat</h2>
<h2>date</h2>
<h2>default</h2>
<h2>downcase</h2>
<h2>first</h2>
<h2>join</h2>
<h2>last</h2>
<h2>map</h2>
<h2>prepend</h2>
<h2>remove</h2>
<h2>remove_first</h2>
<h2>replace</h2>
<h2>replace_first</h2>
<h2>reverse</h2>
<h2>size</h2>
<h2>slice</h2>
<h2>sort</h2>
<h2>sort_natural</h2>
<h2>split</h2>
<h2>strip</h2>
<h2>truncate</h2>
<h2>uniq</h2>
<h2>upcase</h2>
<h2>where</h2>2:[null,["$","html",null,{"children":["$","body",null,{"children":["$","$L4",null,{"children":[["$","header",null,{"className":"h-16 sticky top-0 flex justify-center shadow bg-white/70 items-center backdrop-blur-sm dark:bg-black/80 dark:shadow-neutral-800","children":["$","nav",null,{"className":"flex ","children":[["$","div",null,{"className":"flex font-bold","children":[["$","$L5","Blog",{"href":"/blog","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"Blog"}],["$","$L5","About",{"href":"/about","className":"transition flex justify-center w-16 text-gray-900 hover:text-gray-300 dark:text-gray-100 dark:hover:text-gray-600","children":"About"}]]}],["$","div",null,{"className":"flex","children":["$","$L6",null,{}]}]]}]}],["$","main",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col h-[90vh] items-center justify-center","children":["$","div",null,{"className":"flex items-center","children":[["$","h1",null,{"className":"inline-block text-2xl pr-8 mr-8 border-r-[1.5px] border-gray-400 py-2","children":"404"}],["$","h2",null,{"className":"inline-block text-lg","children":"This page could not be found"}]]}]}],"notFoundStyles":[],"childProp":{"current":[null,["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,1100px),1fr]","children":["$","div",null,{"className":"col-start-2 grid grid-cols-[minmax(auto,200px),min(700px,100%)] gap-x-10","children":[["$","div",null,{"children":["$","div",null,{"className":"space-y-5","children":[["$","div","Linux",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Linux"}],[["$","$L5","basic",{"href":"/blog/basic","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"basic"}],["$","span",null,{"className":"text-gray-400","children":["(",7,")"]}]]}]]]}],["$","div","Web",{"children":[["$","div",null,{"className":"mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":"Web"}],[["$","$L5","GitHub Pages + Next",{"href":"/blog/GitHub Pages + Next","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"GitHub Pages + Next"}],["$","span",null,{"className":"text-gray-400","children":["(",1,")"]}]]}],["$","$L5","Github pages",{"href":"/blog/Github pages","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"Github pages"}],["$","span",null,{"className":"text-gray-400","children":["(",15,")"]}]]}],["$","$L5","PC Community",{"href":"/blog/PC Community","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"PC Community"}],["$","span",null,{"className":"text-gray-400","children":["(",8,")"]}]]}],["$","$L5","온라인 명륜당",{"href":"/blog/온라인 명륜당","className":"block rounded-md m-0 px-3 py-1 text-sm font-medium hover:bg-gray-100 hover:text-zinc-800 dark:hover:bg-zinc-800 dark:hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"온라인 명륜당"}],["$","span",null,{"className":"text-gray-400","children":["(",0,")"]}]]}]]]}]]}]}],["$","div",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","Github%20pages","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$9","children",["post","10","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","article",null,{"className":"mx-auto","children":[["$","div",null,{"className":"mb-12 text-center","children":[["$","h1",null,{"className":"text-3xl font-bold","children":"Github Pages로 블로그 만들기 (10) - Liquid 문법"}],["$","time",null,{"dateTime":"2021-08-11T00:00:00.000Z","className":"mb-1 text-xs text-gray-600 dark:text-gray-400","children":"2021. 08. 11."}]]}],["$","div",null,{"className":"[&>*]:mb-3 [&>*:last-child]:mb-0 markdown-body","dangerouslySetInnerHTML":{"__html":"$b"}}]]}],null],"segment":"__PAGE__?{\"board\":\"Github pages\",\"post\":\"10\"}"},"styles":null}],"segment":["post","10","d"]},"styles":null}],"segment":["board","Github%20pages","d"]},"styles":null}]}]]}]}],null],"segment":"blog"},"styles":null}]}]]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Github Pages로 블로그 만들기 (10) - Liquid 문법 | 개발 일지"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
a:null
